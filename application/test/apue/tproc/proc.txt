一 进程

 1 进程是活跃的程序；
   程序是可执行的文件；

 2 进程的地址空间

   理论范围：0 ~ 4G-1
   
   h
										.env
										.stack
										.sharelib mmap
										.heap   (malloc)
                    .data   (全局变量，静态局部变量）
                    .rodata (字符串常量)
   l                .text

 3 环境变量
	 int setjmp(jmp_buf env);
	 记录要跳转的位置；
   顺序执行返回 0；
   跳转返回val（from longjmp）

   void longjmp(jmp_buf env, int val);
	 实现跳转；
	 env要跳转的位置，
   val跳转数值传递； 

二 进程的id号

 1 pid
   系统启动过程，首先产生的进程pid=0(调度进程)
   调度进程产生子进程（init pid 1）
   init进程产生bash;


   pid 0 -> init ->gnome-terminal->bash -> a.out -> child of a.out

                                 ->bash 
   
 2 查看进程的命令

   ps
   ps axu
   ps -o pid,ppid,comm
   ps -eo pid,ppid,comm


 3 uid euid
   setuid修改uid和euid两项；

   euid作用是判断进程权限；
   uid 作用是修改euid号；

   如果有超级权限，修改id会成功。
   如果没有超级权限，
	 ＊如果修改euid到uid，会成功。
	 ＊否则会修改失败

 4 思考题目：登录普通用户，作超级权限的操作。
  
  a 创建一个文件（content）；
  b 使用超级权限，修改这个文件的属性；
  c 通过这个文件执行要执行的操作(a.out)；


  chmod u+s file
	file 执行 uid = 登录用户id
            euid = 文件的所用者用户




  

四 执行程序 

 execl(path, arg, ...);
 //    "/bin/ls", "ls", "-l", "NULL"

 execlp(file, arg, ...);
 //    "ls", "ls", "-l", "NULL"
 //    "/bin/ls", "ls", "-l", "NULL"


 execv(const char *path, char *const
       argv[])

 char arg[] = {
						  					      "ls"，
                              "-l"，
															"NULL"，				
							}
 execvp(const char *file, char *const
       argv[])


 "ls" "-l"   

五 fork

 1 pid_t fork(void);

 创建子进程；
 调用一次，返回两次； 
 子进程和父进程数据相同,
 全局变量， 局部变量，
 代码是相同，打开的文件描述符号相同，
 eip（程序当前执行指针）相同；
 

 返回值不同，父进程返回子进程的pid,
 子进程返回0；

 2 课后练习

 实现一个简单的bash；
 可以多次输入命令（fgets）；
 解析输入的字符串 (strsep)；
 创建子进程；
 子进程执行命令；
 父进程等待子进程结束，接收新命令；
 提交练习命令：
 scp path/name.c root@192.168.11.254:/root/hw
 执行带管道命令注意：
  a 管道连通再等待；
  b 管道关闭数量为4次；

六 wait 和 waitpid

 1 子进程先退出，父进程在执行，
   子进程就是僵尸进程；

   去掉僵尸进程的方法，使用等待(父进程调用wait)

 2 父进程先退出，子进程在执行，
   子进程就是孤儿进程；

  系统检测到孤儿进程后，进行领养
  （孤儿进程的父进程修改为init（pid 1））；

 3 如果等待的子进程没退出，wait将阻塞等待；
   wait返回回收资源进程的id,
   出错返回－1；
   
 4 pid_t waitpid(pid_t  pid,  int  *status,
       int options);

   options WNOHAGN 
   返回0 要等待的子进程存在，还在执行。
   返回pid, 要等的子进程已经退出；
   返回<0 出错返回；


 5 练习：子进程执行 ls -l -a /etc/ppp
   p : fork wait
   c : exec


 6 管道综合练习：双子进程执行 
   ps -eo pid,ppid,comm | grep bash
   调用 fork pipe dup2 exec

 7 system 应用

   find /etc/ppp
   删除特定名字的文件：
   dup2 pipe fork wait system

   FILE   *fdopen(int  fildes,  const  char
   *mode);

   


七 exit _exit atexit

	_exit() 使调用进程退出；
  exit()  exit调用_exit(), 
	刷新打开文件的缓冲区到文件；
  释放分配的堆内存；
  关闭1打开的文件；
	调用被atexit注册的函数；

  atexit();
  注册函数：记录函数的入口地址，
  到适合条件执行函数；

	主函数的正常返回， 会执行exit();
  ----exit(main());


八 进程管理

 1 进程组

   组号相同的进程，共同构成一个进程组；
   组长进程:pid == gprg


 2 修改进程所属组

   int setpgid(pid_t pid, pid_t pgid);
   pid  ：修改那个进程的组号；
   pgid : 修改的目的组号， 
     pgid必须是一个存在的组号， 
     或者一自己的pid作为组号；

   
 3 前台进程组号

   属于bash的一个号码

   前台进程组：前台进程组号 ＝＝ 自己的进程组号
   
   前台进程可以读取控制终端


   int tcsetpgrp(int fd, pid_t pgrp);
   修改前台进程组号；
   fd : 0;
   pgrp : 目标前台进程组号 
  
 4 会话

  进程组的sid如果相同，就属于同一个会话；


  pid_t setsid(void);
  设置sid, 组长进程执行，就失败。


  回话首进程 ： pid == sid;


九 守护进程
  
 1 umask 为 0
	mode_t umask(mode_t mask);
  设置当前进程的umask, 修改为mask, 
  返回修改前的进程umask,
 2 调用fork , 退出父进程
 3 调用setsid
 4 修改当前路径为/
	 内部命令：不是一个可执行的文件， 执行内部命令，
   只需要调用一个或几个系统调用；
   如cd : 调用系统函数 chdir

 5 关闭不需要的文件描述符；
 6 文件描述符0， 1， 2， 修改为/dev/null 

九 出错记录

 1 void  openlog(const  char  *ident,   int
       option, int facility);
 ident : 每条日志的日志头，
 option :
  LOG_CONS : 出错的时候，记录会显示在终端。
  LOG_NDELAY ： 在openlog 执行的时候建立连接
  LOG_ODELAY ： 在syslog  执行的时候建立连接
  LOG_PID    ： 每条记录增加进程号；
 facility :
  LOG_USER   ： 用户级日志；
  LOG_KERN   :  内核日志；
  LOG_DAEMON ： 守护进程日志;


 void  syslog(int  priority,  const  char
       *format, ...);
 priority : 
   level | facility

 level :
	LOG_ALERT : 立刻执行
  LOG_ERR   ：执行出错使用
  LOG_INFO  ：记录信息
  LOG_DEBUG ：对开发人员可见，发布版本程序不记录。

 日志文件所在目录： /var/log/messages


 2 网络日志

 如何查看网络监听端口号：
 netstat -an 




首先如果不传递参数给main则argc的值为1，argv[0]的内容是程序的名称。也就是说如果判断有没有参数传给main则要判断argc是不是<2。

#include "stdafx.h"
int _tmain(int argc, _TCHAR* argv[])
{
using namespace std;
cout << "Hello world!" << endl;
cout << "There are " << argc << " arguments:" << endl;
for(int i=0; i< argc; i++)
{
cout << i << " " << argv[i] << endl;
}
system("PAUSE");
return 0;
}
如果这段代码运行时带上2个参数：txt1 config2.txt
这段代码应该打印出程序的名称argv[0]，第一个参数argv[1] "txt1"，及第二个参数argv[2]"config2.txt"，可惜编程中永远没有应该2字，实际的输出为：
获取传递给main的参数

why?
上网查了一下，原因是_tmain是支持UNICODE的，而cout支持的是ANSI，所以解决方式有2个，即
1. 用main 和 cout
int main(int argc, char* argv[])
{
using namespace std;
cout << "Hello world!" << endl;
cout << "There are " << argc << " arguments:" << endl;
for(int i=0; i< argc; i++)
{
cout << i << " " << argv[i] << endl;
}
system("PAUSE");
return 0;
}
2. 用_tmain 和 wcout
int _tmain(int argc, _TCHAR* argv[])
{
using namespace std;
wcout << "Hello world!" << endl;
wcout << "There are " << argc << " arguments:" << endl;
for(int i=0; i< argc; i++)
{
wcout << i << " " << argv[i] << endl;
}
system("PAUSE");
return 0;
}
都可以得到正确的结果，
获取传递给main的参数

#include "stdafx.h"
#if defined(UNICODE)
#define _tcout wcout
#else
#define _tcout cout
#endif
//int _tmain(int argc, _TCHAR* argv[])
int main(int argc, char* argv[])
{
using namespace std;
_tcout << "Hello world!" << endl;
_tcout << "There are " << argc << " arguments:" << endl;
for(int i=0; i< argc; i++)
{
_tcout << i << " " << argv[i] << endl;
}
system("PAUSE");
return 0;
}
即根据系统是否定义了UNICODE来决定使用cout还是wcout，当然需要自定义一个宏_cout，这样无论是main还是_tmain都运行正确。

2. getopt
相关函数表头文件
        #include<unistd.h>
定义函数
        int getopt(int argc,char * const argv[ ],const char * optstring);
函数说明
        getopt() 用来分析命令行参数。参数 argc 和 argv 是由 main() 传递的参数个数和内容。参数 optstring 则代表欲处理的选项字符串。
		此函数会返回在 argv 中下一个的选项字母，此字母会对应参数 optstring 中的字母。如果选项字符串里的字母后接着冒号“:”，则表示还有相关的参数，全域变量 optarg 即会指向此额外参数。
		如果 getopt() 找不到符合的参数则会印出错信息，并将全域变量optopt设为“?”字符，如果不希望getopt()印出错信息，则只要将全域变量opterr设为0即可。
 
短参数的定义
       getopt() 使用 optstring 所指的字串作为短参数列表，象"1ac:d::"就是一个短参数列表。短参数的定义是一个'-'后面跟一个字母或数字，象-a, -b就是一个短参数。每个数字或字母定义一个参数。 
　　其中短参数在getopt定义里分为三种：
　　1. 不带值的参数，它的定义即是参数本身。
　　2. 必须带值的参数，它的定义是在参数本身后面再加一个冒号。
　　3. 可选值的参数，它的定义是在参数本身后面加两个冒号 。
　　在这里拿上面的"1ac:d::"作为样例进行说明，其中的1,a就是不带值的参数，c是必须带值的参数，d是可选值的参数。
　　在实际调用中，'-1 -a -c cvalue -d', '-1 -a -c cvalue -ddvalue', '-1a -ddvalue -c cvalue'都是合法的。这里需要注意三点：
　　1. 不带值的参数可以连写，象1和a是不带值的参数，它们可以-1 -a分开写，也可以-1a或-a1连写。
　　2. 参数不分先后顺序，'-1a -c cvalue -ddvalue'和'-d -c cvalue -a1'的解析结果是一样的。
　　3. 要注意可选值的参数的值与参数之间不能有空格，必须写成-ddvalue这样的格式，如果写成-d dvalue这样的格式就会解析错误。

返回值
　  getopt()每次调用会逐次返回命令行传入的参数。
　  当没有参数的最后的一次调用时，getopt()将返回-1。
　  当解析到一个不在optstring里面的参数，或者一个必选值参数不带值时，返回'?'。
　  当optstring是以':'开头时，缺值参数的情况下会返回':'，而不是'?' 。
范例 
#include <stdio.h>  
#include <unistd.h>  
 
int main(int argc, int *argv[])  
{  
        int ch;  
        opterr = 0;  
        while ((ch = getopt(argc,argv,"a:bcde"))!=-1)  
        {  
                switch(ch)  
                {  
                        case 'a':  
                                printf("option a:'%s'\n",optarg);  
                                break;  
                        case 'b':  
                                printf("option b :b\n");  
                                break;  
                        default:  
                                printf("other option :%c\n",ch);  
                }  
        }  
        printf("optopt +%c\n",optopt);  
}  


#include <stdio.h>
#include <unistd.h>  
#if 0
int main(int argc, char* argv[])
{
	printf("There are %d arguments:", argc);
	
	for(int i=0; i< argc; i++)
	{
		printf("%d %s\r\n", i, argv[i]);
	}
	
	if (!strncmp(argv[1], "-v", strlen("-v")))
	{
		printf("version test\r\n");
	}
	
	system("PAUSE");
	return 0;
}
#endif
int main(int argc, int *argv[])  
{  
        int ch;  
        opterr = 0;  
        while ((ch = getopt(argc,(char * const*)argv,"a:bcde"))!=-1)  
        {  
                switch(ch)  
                {  
                        case 'a':  
                                printf("option a:'%s'\n",optarg);  
                                break;  
                        case 'b':  
                                printf("option b :b\n");  
                                break;  
                        default:  
                                printf("other option :%c\n",ch);  
                }  
        }  
        printf("optopt +%c\n",optopt);  
}  

getopt()函数的出处就是unistd.h头文件
int getopt(int argc,char * const argv[ ],const char * optstring);

前两个参数是main函数的两个参数，第三个参数是个字符串，选项字符串
返回值为int类型，我们都知道char类型是可以转换成int类型的，每个字符都有他所对应的整型值，其实这个返回值返回的就是一个字符，叫选项字符
1、extern char* optarg;
2、extern int optind;
3、extern int opterr;
4、extern int optopt;

1是用来保存选项的参数的；
2用来记录下一个检索位置；
3表示的是是否将错误信息输出到stderr，为0时表示不输出；
4表示不在选项字符串optstring中的选项

问题1：选项是什么？
在linux下大家都用过这样一条指令吧：gcc helloworld.c -o helloworld.out; 这条指令中的-o就是命令行的选项，而后面的helloworld.out就是-o选项所携带的参数。熟悉shell指令的都知道,有些选项是不用带参数的，而这样不带参数的选项可以写在一起，比如说有两个选项-c和-d，这两个选项都不带参数,那么他们是可以写在一起，写成-cd的。实际的例子：当我们删除一个文件夹时可以使用指令 rm 目录名 -rf，本来-r表示递归删除，就是删除文件夹中所有的东西，-f表示不提示就立刻删除，他们两个都不带参数，这时他们就可以写在一起。

问题2:选项字符串又是？
"a:b:cd::e"，这就是一个选项字符串。对应到命令行就是-a ,-b ,-c ,-d, -e 。冒号又是什么呢？ 冒号表示参数，一个冒号就表示这个选项后面必须带有参数（没有带参数会报错），但是这个参数可以和选项连在一起写，也可以用空格隔开，比如-a123 和-a   123（中间有空格） 都表示123是-a的参数；两个冒号的就表示这个选项的参数是可选的，即可以有参数，也可以没有参数，但要注意有参数时，参数与选项之间不能有空格（有空格会报错的），这一点和一个冒号时是有区别的。

#include <unistd.h>
#include <stdio.h>
int main(int argc, char * argv[])
{
    
    int ch;
    printf("\n\n");
    printf("optind:%d，opterr：%d\n",optind,opterr);
    printf("--------------------------\n");
       while ((ch = getopt(argc, argv, "ab:c:de::")) != -1)
       {
        printf("optind: %d\n", optind);
           switch (ch) 
        {
               case 'a':
                       printf("HAVE option: -a\n\n");   
                       break;
               case 'b':
                       printf("HAVE option: -b\n"); 
                       printf("The argument of -b is %s\n\n", optarg);
                       break;
               case 'c':
                       printf("HAVE option: -c\n");
                       printf("The argument of -c is %s\n\n", optarg);
                       break;
               case 'd':
                   printf("HAVE option: -d\n");
                     break;
              case 'e':
                    printf("HAVE option: -e\n");
                    printf("The argument of -e is %s\n\n", optarg);
                  break;
              case '?':
                       printf("Unknown option: %c\n",(char)optopt);
                       break;
               }
       }


}
 
编译后命令行执行：# ./main -b "qing er"

输出结果为：

optind:1，opterr：1
--------------------------
optind: 3
HAVE option: -b
The argument of -b is qing er

我们可以看到：optind和opterr的初始值都为1，前面提到过opterr非零表示产生的错误要输出到stderr上。那么optind的初值为什么是1呢？

这就要涉及到main函数的那两个参数了，argc表示参数的个数，argv[]表示每个参数字符串，对于上面的输出argc就为3，argv[]分别为： ./main 和 -b 和"qing er" ，实际上真正的参数是用第二个-b 开始，也就是argv[1],所以optind的初始值为1；

当执行getopt（）函数时，会依次扫描每一个命令行参数（从下标1开始）,第一个-b,是一个选项，而且这个选项在选项字符串optstring中有，我们看到b后面有冒号，也就是b后面必须带有参数，而"qing er"就是他的参数。所以这个命令行是符合要求的。至于执行后optind为什么是3，这是因为optind是下一次进行选项搜索的开始索引，也是说下一次getopt（）函数要从argv[3]开始搜索。当然，这个例子argv[3]已经没有了，此时getopt（）函数就会返回-1。

再看一个输入：

 ./main -b "qing er" -c1234

输出结果为：

optind:1，opterr：1
--------------------------
optind: 3
HAVE option: -b
The argument of -b is qing er

optind: 4
HAVE option: -c
The argument of -c is 1234


对于这个过程会调用三次getopt（）函数，和第一个输入一样，是找到选项-b和他的参数"qing er",这时optind的值为3，也就意味着，下一次的getopt（）要从argv[3]开始搜索，所以第二次调用getopt()函数，找到选项-c和他的参数1234（选项和参数是连在一起的），由于-c1234写在一起，所以他两占一起占用argv[3]，所以下次搜索从argv[4]开始，而argv[4]为空，这样第三次调用getopt()函数就会返回-1，循环随之结束。

接下来我们看一个错误的命令行输入: ./main -z 123

输出为：

optind:1，opterr：1
--------------------------
./main: invalid option -- 'z'
optind: 2
Unknown option: z

其中./main: invalid option -- 'z'就是输出到stderr的错误输出。如果把opterr设置为0那么就不会有这条输出。

在看一个错误的命令行输入： ./main -zheng

 

optind:1，opterr：1
--------------------------
./main: invalid option -- 'z'
optind: 1
Unknown option: z
./main: invalid option -- 'h'
optind: 1
Unknown option: h
optind: 2
HAVE option: -e
The argument of -e is ng

前面提到过不带参数的选项可以写在一起，所以当getopt()找到-z的时候，发现在optstring 中没有，这时候他就认为h也是一个选项，也就是-h和-z写在一起了，依次类推，直到找到-e，发现optstring中有。

最后要说明一下，getopt（）会改变argv[]中参数的顺序。经过多次getopt（）后，argv[]中的选项和选项的参数会被放置在数组前面，而optind 会指向第一个非选项和参数的位置。看例子

#include <unistd.h>
#include <stdio.h>
int main(int argc, char * argv[])
{
    int i;
    printf("--------------------------\n");
    for(i=0;i<argc;i++)
    {
        printf("%s\n",argv[i]);
    }
    printf("--------------------------\n");
       //int aflag=0, bflag=0, cflag=0;
    
    int ch;
    printf("\n\n");
    printf("optind:%d，opterr：%d\n",optind,opterr);
    printf("--------------------------\n");
       while ((ch = getopt(argc, argv, "ab:c:de::")) != -1)
       {
        printf("optind: %d\n", optind);
           switch (ch) 
        {
               case 'a':
                       printf("HAVE option: -a\n\n");   
                       break;
               case 'b':
                       printf("HAVE option: -b\n"); 
                       printf("The argument of -b is %s\n\n", optarg);
                       break;
               case 'c':
                       printf("HAVE option: -c\n");
                       printf("The argument of -c is %s\n\n", optarg);
                       break;
               case 'd':
                   printf("HAVE option: -d\n");
                     break;
              case 'e':
                    printf("HAVE option: -e\n");
                    printf("The argument of -e is %s\n\n", optarg);
                  break;
              case '?':
                       printf("Unknown option: %c\n",(char)optopt);
                       break;
               }
       }
    
       printf("----------------------------\n");
      printf("optind=%d,argv[%d]=%s\n",optind,optind,argv[optind]);

    printf("--------------------------\n");
    for(i=0;i<argc;i++)
    {
        printf("%s\n",argv[i]);
    }
    printf("--------------------------\n");
    

}
 
 命令行：./main zheng -b "qing er" han -c123 qing

 

输出结果为：

--------------------------
./main
zheng
-b
qing er
han
-c123
qing
--------------------------


optind:1，opterr：1
--------------------------
optind: 4
HAVE option: -b
The argument of -b is qing er

optind: 6
HAVE option: -c
The argument of -c is 123

----------------------------
optind=4,argv[4]=zheng
--------------------------
./main
-b
qing er
-c123
zheng
han
qing
--------------------------

 

可以看到最开始argv[]内容为：

./main
zheng
-b
qing er
han
-c123
qing

 

在执行了多次getopt后变成了

./main
-b
qing er
-c123
zheng
han
qing

我们看到，被getopt挑出的选项和对应的参数都按顺序放在了数组的前面，而那些既不是选项又不是参数的会按顺序放在后面。
而此时optind为4，即指向第一个非选项也非选项的参数，zheng

Linux下很多程序甚至那些具有图形用户界面（graphical user interface，GUI）的程序，都能接受和处理命令行选项。
对于某些程序，这是与用户进行交互的主要手段。具有可靠的复杂命令行参数处理机制，会使得您的应用程序更好、更有用。
getopt()是一个专门设计来减轻命令行处理负担的库函数。
1、命令行参数

命令行程序设计的首要任务是解析命令行参数，GUI派的程序员很少关心这个。这里，对参数采用了一种比较通俗的定义：命令行上除命令名之外的字符串。
参数由多项构成，项与项之间用空白符彼此隔开。
参数进一步分为选项和操作数。选项用于修改程序的默认行为或为程序提供信息，比较老的约定是以短划线开头。选项后可以跟随一些参数，称为选项参数。剩下的就是操作数了。
2、POSIX约定
POSIX表示可移植操作系统接口： Portable Operating System Interface，电气和电子工程师协会（Institute of Electrical and Electronics Engineers，IEEE）最初开发 POSIX 标准，是为了提高 UNIX 环境下应用程序的可移植性。然而，POSIX 并不局限于 UNIX。许多其它的操作系统，例如 DEC OpenVMS 和 Microsoft Windows NT，都支持 POSIX 标准。
下面是POSIX标准中关于程序名、参数的约定：
程序名不宜少于2个字符且不多于9个字符；
程序名应只包含小写字母和阿拉伯数字；
选项名应该是单字符活单数字，且以短横‘-‘为前綴；
多个不需要选项参数的选项，可以合并。（譬如：foo -a -b -c ---->foo -abc）
选项与其参数之间用空白符隔开；
选项参数不可选。
若选项参数有多值，要将其并为一个字串传进来。譬如：myprog -u "arnold,joe,jane"。这种情况下，需要自己解决这些参数的分离问题。
选项应该在操作数出现之前出现。
特殊参数‘--'指明所有参数都结束了，其后任何参数都认为是操作数。
选项如何排列没有什么关系，但对互相排斥的选项，如果一个选项的操作结果覆盖其他选项的操作结果时，最后一个选项起作用；如果选项重复，则顺序处理。
允许操作数的顺序影响程序行为，但需要作文档说明。
读写指定文件的程序应该将单个参数'-'作为有意义的标准输入或输出来对待。
3、GNU长选项
GNU鼓励程序员使用--help、--verbose等形式的长选项。这些选项不仅不与POSIX约定冲突，而且容易记忆，另外也提供了在所有GNU工具之间保持一致性的机会。GNU长选项有自己的约定：
对于已经遵循POSIX约定的GNU程序，每个短选项都有一个对应的长选项。
额外针对GNU的长选项不需要对应的短选项，仅仅推荐要有。
长选项可以缩写成保持惟一性的最短的字串。
选项参数与长选项之间或通过空白字符活通过一个'='来分隔。
选项参数是可选的（只对短选项有效）。
长选项允许以一个短横线为前缀。
4、基本的命令行处理技术

C程序通过argc和argv参数访问它的命令行参数。argc是整型数，表示参数的个数（包括命令名）。main()函数的定义方式有两种，区别仅在于argv如何定义：
int main(int argc, char *argv[])
{
   ……
}	int main(int argc, char **argv)
{
   ……
}
当 C 运行时库的程序启动代码调用 main() 时，已经对命令行进行了处理。argc 参数包含参数的计数值，而 argv 包含指向这些参数的指针数组。argv[0]是程序名。
一个很简单的命令行处理技术的例子是echo程序，它可以将参数输出到标准设备上，用空格符隔开，最后换行。若命令行第一个参数为-n，那么就不会换行。
清单1：
#include <stdio.h>

int main(int argc, char **argv)
{
    int i, nflg;

    nflg = 0;
    if(argc > 1 && argv[1][0] == '-' && argv[1][1] == 'n'){
        nflg++;
        argc--;
        argv++;
    }
    for(i=1; i<argc; i++){
        fputs(argv[i], stdout);
        if(i < argc-1)
            putchar(' ');
    }
    if(nflg == 0)
        putchar('\n');

    return 0;
}
echo程序中，对于命令行参数的解析是手动实现的。很久以前，Unix支持小组为了简化对于命令行参数的解析，开发了getopt()函数，同时提供了几个外部变量，使得编写遵守POSIX的代码变得更加容易了。
5、命令行参数解析函数 —— getopt()

getopt()函数声明如下：
#include <unistd.h>

int getopt(int argc, char * const argv[], const char *optstring);

extern char *optarg;
extern int optind, opterr, optopt;
该函数的argc和argv参数通常直接从main()的参数直接传递而来。optstring是选项字母组成的字串。如果该字串里的任一字符后面有冒号，那么这个选项就要求有选项参数。
当给定getopt()命令参数的数量 (argc)、指向这些参数的数组 (argv) 和选项字串 (optstring) 后，getopt() 将返回第一个选项，并设置一些全局变量。使用相同的参数再次调用该函数时，它将返回下一个选项，并设置相应的全局变量。如果不再有可识别的选项，将返回 -1，此任务就完成了。
getopt() 所设置的全局变量包括：
char *optarg——当前选项参数字串（如果有）。
int optind——argv的当前索引值。当getopt()在while循环中使用时，循环结束后，剩下的字串视为操作数，在argv[optind]至argv[argc-1]中可以找到。
int opterr——这个变量非零时，getopt()函数为“无效选项”和“缺少参数选项，并输出其错误信息。
int optopt——当发现无效选项字符之时，getopt()函数或返回'?'字符，或返回':'字符，并且optopt包含了所发现的无效选项字符。
以下面的程序为例：
选项：
-n —— 显示“我的名字”。
-g —— 显示“我女朋友的名字”。
-l —— 带参数的选项.
清单2：

#include <stdio.h>
#include <unistd.h>

int main (int argc, char **argv)
{
    int oc;                    
    char *b_opt_arg;           

    while((oc = getopt(argc, argv, "ngl:")) != -1)
    {
        switch(oc)
        {
            case 'n':
                printf("My name is Lyong.\n");
                break;
            case 'g':
                printf("Her name is Xxiong.\n");
                break;
            case 'l':
                b_opt_arg = optarg;
                printf("Our love is %s\n", optarg);
                break;
        }
    }
   return 0;
}
运行结果：
$ ./opt_parse_demo -n
My name is Lyong.
$ ./opt_parse_demo -g
Her name is Xxiong.
$ ./opt_parse_demo -l forever
Our love is forever
$ ./opt_parse_demo -ngl forever
My name is Lyong.
Her name is Xxiong.
Our love is forever
6、改变getopt()对错误命令行参数信息的输出行为

不正确的调用程序在所难免，这种错误要么是命令行选项无效，要么是缺少选项参数。正常情况下，getopt()会为这两种情况输出自己的出错信息，并且返回'?'。为了验证此事，可以修改一下上面的清单2中的代码。
清单3：

#include <stdio.h>
#include <unistd.h>

int main (int argc, char **argv)
{
    int oc;                    
    char *b_opt_arg;           

    while((oc = getopt(argc, argv, "ngl:")) != -1)
    {
        switch(oc)
        {
            case 'n':
                printf("My name is Lyong.\n");
                break;
             case 'g':
                printf("Her name is Xxiong.\n");
                break;
            case 'l':
                b_opt_arg = optarg;
                printf("Our love is %s\n", optarg);
                break;
            case '?':
                printf("arguments error!\n");
                break;
        }
    }
    return 0;
}
输入一个错误的命令行，结果如下：
$ ./opt_parse_demo -l
./opt_parse_demo: option requires an argument -- l
arguments error!
如果不希望输出任何错误信息，或更希望输出自定义的错误信息。可以采用以下两种方法来更改getopt()函数的出错信息输出行为：
在调用getopt()之前，将opterr设置为0，这样就可以在getopt()函数发现错误的时候强制它不输出任何消息。
如果optstring参数的第一个字符是冒号，那么getopt()函数就会保持沉默，并根据错误情况返回不同字符，如下：
“无效选项” —— getopt()返回'?'，并且optopt包含了无效选项字符（这是正常的行为）。
“缺少选项参数” —— getopt()返回':'，如果optstring的第一个字符不是冒号，那么getopt()返回'?'，这会使得这种情况不能与无效选项的情况区分开。
清单4：

#include <stdio.h>
#include <unistd.h>

int main (int argc, char **argv)
{
    int oc;                    
    char ec;                            
    char *b_opt_arg;           

    while((oc = getopt(argc, argv, ":ngl:")) != -1)
    {
        switch(oc)
        {
            case 'n':
                printf("My name is Lyong.\n");
                break;
             case 'g':
                printf("Her name is Xxiong.\n");
                break;
            case 'l':
                b_opt_arg = optarg;
                printf("Our love is %s\n", optarg);
                break;
            case '?':
                ec = (char)optopt;
                printf("无效的选项字符 \' %c \'!\n", ec);
                break;
            case ':':
                printf("缺少选项参数！\n");
                break;
        }
    }
    return 0;
}
测试结果：
$ ./opt_parse_demo -a
无效的选项字符 ' a '!
$ ./opt_parse_demo -l
缺少选项参数！
7、GNU提供的getopt()函数的特点

上面所设计的getopt()函数是UNIX支持小组提供的，其执行时一碰到不以'-'开始的命令行参数就停止寻找选项。而GNU提供的getopt()函数与之不同，它会扫描整个命令行来寻找选项。当调用GNU getopt()函数并处理命令行参数的时候，它重新排列argv中的元素，这样当重排结束时，所有选项都被移动到前面并且那些继续检查argv [optind]至argv[argc-1]中剩余参数的代码仍正常工作，但在任何情况下，碰到特殊参数'--'就结束对选项的扫描。
可以输入一个乱序的命令行，查看opt_parse_demo的输出：
$ ./opt_parse_demo -l forever a b c d -g -n
Our love is forever
Her name is Xxiong.
My name is Lyong.
GNU getopt()第二个特点是可以在optstring中使用特殊的首字符改变getopt()的默认行为：
optstring[0] = '+'，这样就与UNIX支持小组提供的getopt()很相近了。
optstring[0] = '-'，会在optarg中得到命令行中的每个参数。
以上两种情况下，':'可以作为第二个字符使用。
GNU getopt()第三个特点是optstring中的选项字符后面接两个冒号，就允许该选项有可选的选项参数。在选项参数不存在的情况下，GNU getopt()返回选项字符并将optarg设置为NULL。
8、GNU长选项命令行解析

20 世纪 90 年代，UNIX 应用程序开始支持长选项，即一对短横线、一个描述性选项名称，还可以包含一个使用等号连接到选项的参数。
GNU提供了getopt-long()和getopt-long-only()函数支持长选项的命令行解析，其中，后者的长选项字串是以一个短横线开始的，而非一对短横线。
getopt_long() 是同时支持长选项和短选项的 getopt() 版本。下面是它们的声明：
#include <getopt.h>

int getopt_long(int argc, char * const argv[], const char *optstring, const struct option *longopts, int *longindex);

int getopt_long_only(int argc, char * const argv[],const char *optstring,const struct option *longopts, int *longindex);
getopt_long()的前三个参数与上面的getopt()相同，第4个参数是指向option结构的数组，option结构被称为“长选项表”。longindex参数如果没有设置为 NULL，那么它就指向一个变量，这个变量会被赋值为寻找到的长选项在longopts中的索引值，这可以用于错误诊断。
option结构在getopt.h中的声明如下：
struct option{
    const char *name;
    int has_arg;
    int *flag;
    int val;
};
对结构中的各元素解释如下：
const char *name

这是选项名，前面没有短横线。譬如"help"、"verbose"之类。
int has_arg

描述了选项是否有选项参数。如果有，是哪种类型的参数，此时，它的值一定是下表中的一个。
符号常量 	数值 	含义 
no_argument 	0	选项没有参数 
required_argument	1	选项需要参数
optional_argument	2	选项参数可选 
int *flag

如果这个指针为NULL，那么 getopt_long()返回该结构val字段中的数值。如果该指针不为NULL，getopt_long()会使得它所指向的变量中填入val字段中的数值，并且getopt_long()返回0。如果flag不是NULL，但未发现长选项，那么它所指向的变量的数值不变。
int val

这个值是发现了长选项时的返回值，或者flag不是NULL时载入*flag中的值。典型情况下，若flag不是NULL，那么val是个真／假值，譬如1或0；另一方面，如果flag是NULL，那么 val通常是字符常量，若长选项与短选项一致，那么该字符常量应该与optstring中出现的这个选项的参数相同。
每个长选项在长选项表中都有一个单独条目，该条目里需要填入正确的数值。数组中最后的元素的值应该全是0。数组不需要排序，getopt_long()会进行线性搜索。但是，根据长名字来排序会使程序员读起来更容易。
以上所说的flag和val的用法看上去有点混乱，但它们很有实用价值，因此有必要搞透彻了。
大部分时候，程序员会根据getopt_long()发现的选项，在选项处理过程中要设置一些标记变量，譬如在使用getopt()时，经常做出如下的程序格式：
int do_name, do_gf_name, do_love;
char *b_opt_arg;

while((c = getopt(argc, argv, ":ngl:")) != -1)
{
    switch (c){
    case 'n':
        do_name = 1;
    case 'g':
        do_gf_name = 1;
        break;
        break;
    case 'l':
        b_opt_arg = optarg;
    ……
    }
}
当flag不为NULL时，getopt_long*()会为你设置标记变量。也就是说上面的代码中，关于选项'n'、'l'的处理，只是设置一些标记，如果flag不为NULL,时，getopt_long()可以自动为各选项所对应的标记变量设置标记，这样就能够将上面的switch语句中的两种种情况减少到了一种。下面给出一个长选项表以及相应处理代码的例子。
清单5：


#include <stdio.h>
#include <getopt.h>

int do_name, do_gf_name;
char *l_opt_arg;

struct option longopts[] = {
    { "name",        no_argument,            &do_name,        1    },
    { "gf_name",    no_argument,            &do_gf_name,    1    },
    { "love",        required_argument,    NULL,                'l'    },
    {     0,    0,    0,    0},
};

int main(int argc, char *argv[])
{
    int c;
   
    while((c = getopt_long(argc, argv, ":l:", longopts, NULL)) != -1){
        switch (c){
        case 'l':
            l_opt_arg = optarg;
            printf("Our love is %s!\n", l_opt_arg);
            break;
        case 0:
            printf("getopt_long()设置变量 : do_name = %d\n", do_name);
            printf("getopt_long()设置变量 : do_gf_name = %d\n", do_gf_name);
            break;
        }
    }
    return 0;
}
在进行测试之前，再来回顾一下有关option结构中的指针flag的说明吧。
如果这个指针为NULL，那么 getopt_long()返回该结构val字段中的数值。如果该指针不为NULL，getopt_long()会使得它所指向的变量中填入val字段中的数值，并且getopt_long()返回0。如果flag不是NULL，但未发现长选项，那么它所指向的变量的数值不变。
下面测试一下：
$ ./long_opt_demo --name
getopt_long()设置变量 : do_name = 1
getopt_long()设置变量 : do_gf_name = 0

$ ./long_opt_demo --gf_name
getopt_long()设置变量 : do_name = 0
getopt_long()设置变量 : do_gf_name = 1

$ ./long_opt_demo --love forever
Our love is forever!

$ ./long_opt_demo -l forever
Our love is forever!
测试过后，应该有所感触了。关于flag和val的讨论到此为止。下面总结一下get_long()的各种返回值的含义：
返回值   
含 义
0     
getopt_long()设置一个标志，它的值与option结构中的val字段的值一样
1	每碰到一个命令行参数，optarg都会记录它
'?'	无效选项
':'	缺少选项参数
'x'	选项字符'x'
-1	选项解析结束
从实用的角度来说，我们更期望每个长选项都对应一个短选项，这种情况下，在option结构中，只要将flag设置为NULL，并将val设置为长选项所对应的短选项字符即可。譬如上面清单5中的程序，修改如下。
清单6：

#include <stdio.h>
#include <getopt.h>

int do_name, do_gf_name;
char *l_opt_arg;

struct option longopts[] = {
    { "name",        no_argument,            NULL,                'n'    },
    { "gf_name",    no_argument,            NULL,                'g'    },
    { "love",        required_argument,    NULL,                'l'    },
    {     0,    0,    0,    0},
};

int main(int argc, char *argv[])
{
    int c;
    
    while((c = getopt_long(argc, argv, ":l:", longopts, NULL)) != -1){
        switch (c){
        case 'n':
            printf("My name is LYR.\n");
            break;
        case 'g':
            printf("Her name is BX.\n");
            break;
        case 'l':
            l_opt_arg = optarg;
            printf("Our love is %s!\n", l_opt_arg);
            break;
        }
    }
    return 0;
}
测试结果如下：
$ ./long_opt_demo --name --gf_name --love forever
My name is LYR.
Her name is BX.
Our love is forever!

$ ./long_opt_demo -ng -l forever
My name is LYR.
Her name is BX.
Our love is forever!
9、在LINUX之外的系统平台上使用GNU getopt()或getopt_long()

只 要从GNU程序或GNU C Library(GLIBC)的CVS档案文件中copy源文件即可（http://sourceware.org/glibc/）。所需源文件是 getopt.h、getopt.c和getoptl.c，将这些文件包含在你的项目中。另外，你的项目中最好也将COPYING.LIB文件包含进去，因为GNU LGPL（GNU 程序库公共许可证）的内容全部包括在命名为COPYING.LIB 的文件中。
10、结论
程序需要能够快速处理各个选项和参数，且要求不会浪费开发人员的太多时间。在这一点上，无论是GUI(图形用户交互）程序还是CUI（命令行交互）程序，都是其首要任务，其区别仅在于实现方式的不同。GUI通过菜单、对话框之类的图形控件来完成交互，而CUI使用了纯文本的交互方式。在程序开发中，许多测试程序用CUI来完成是首选方案。
getopt() 函数是一个标准库调用，可允许您使用直接的 while/switch 语句方便地逐个处理命令行参数和检测选项（带或不带附加的参数）。与其类似的 getopt_long() 允许在几乎不进行额外工作的情况下处理更具描述性的长选项，这非常受开发人员的欢迎。

平时在写程序时常常需要对命令行参数进行处理，当命令行参数个数较多时，如果按照顺序一个一个定义参数含义很容易造成混乱，而且如果程序只按顺序处理参数的话，一些“可选参数”的功能将很难实现。
在Linux中，我们可以使用getopt、getopt_long、getopt_long_only来对这个问题进行处理。
[cpp] view plain copy
#include <unistd.h>  
  
int getopt(int argc, char * const argv[],  
           const char *optstring);  
  
extern char *optarg;  
extern int optind, opterr, optopt;  
  
#include <getopt.h>  
  
int getopt_long(int argc, char * const argv[],  
           const char *optstring,  
           const struct option *longopts, int *longindex);  
  
int getopt_long_only(int argc, char * const argv[],  
           const char *optstring,  
           const struct option *longopts, int *longindex);  

从最简单的getopt讲起，getopt函数的前两个参数，就是main函数的argc和argv，这两者直接传入即可，要考虑的就只剩下第三个参数。
optstring的格式举例说明比较方便，例如：
    char *optstring = "abcd:";
上面这个optstring在传入之后，getopt函数将依次检查命令行是否指定了 -a， -b， -c及 -d（这需要多次调用getopt函数，直到其返回-1），当检查到上面某一个参数被指定时，函数会返回被指定的参数名称（即该字母）
最后一个参数d后面带有冒号，: 表示参数d是可以指定值的，如 -d 100 或 -d user。
optind表示的是下一个将被处理到的参数在argv中的下标值。
如果指定opterr = 0的话，在getopt、getopt_long、getopt_long_only遇到错误将不会输出错误信息到标准输出流。
[cpp] view plain copy
#include <unistd.h>  
#include <stdlib.h>  
#include <stdio.h>  
  
int main(int argc, char *argv[])  
{  
    int opt;  
    char *optstring = "a:b:c:d";  
  
    while ((opt = getopt(argc, argv, optstring)) != -1)  
    {  
        printf("opt = %c\n", opt);  
        printf("optarg = %s\n", optarg);  
        printf("optind = %d\n", optind);  
        printf("argv[optind - 1] = %s\n\n",  argv[optind - 1]);  
    }  
  
    return 0;  
}  
编译上述程序并运行，有如下结果：
[cpp] view plain copy
cashey@ubuntu:~/Desktop/getopt$ ./test_getopt -a 100 -b 200 -c admin -d  
opt = a  
optarg = 100  
optind = 3  
argv[optind - 1] = 100  
  
opt = b  
optarg = 200  
optind = 5  
argv[optind - 1] = 200  
  
opt = c  
optarg = admin  
optind = 7  
argv[optind - 1] = admin  
  
opt = d  
optarg = (null)  
optind = 8  
argv[optind - 1] = -d  

下面来讲getopt_long函数，getopt_long函数包含了getopt函数的功能，并且还可以指定“长参数”（或者说长选项），与getopt函数对比，getopt_long比其多了两个参数：

       int getopt(int argc, char * const argv[],
                  const char *optstring);
       int getopt_long(int argc, char * const argv[],
                  const char *optstring,
                  const struct option *longopts, int *longindex);

在这里，longopts指向的是一个由option结构体组成的数组，那个数组的每个元素，指明了一个“长参数”（即形如--name的参数）名称和性质：
           struct option {
               const char *name;
               int         has_arg;
               int        *flag;
               int         val;
           };

       name  是参数的名称

       has_arg 指明是否带参数值，其数值可选：
              no_argument (即 0) 表明这个长参数不带参数（即不带数值，如：--name）
              required_argument (即 1) 表明这个长参数必须带参数（即必须带数值，如：--name Bob）
            optional_argument（即2）表明这个长参数后面带的参数是可选的，（即--name和--name Bob均可）

       flag   当这个指针为空的时候，函数直接将val的数值从getopt_long的返回值返回出去，当它非空时，val的值会被赋到flag指向的整型数中，而函数返回值为0

       val    用于指定函数找到该选项时的返回值，或者当flag非空时指定flag指向的数据的值。
另一个参数longindex，如果longindex非空，它指向的变量将记录当前找到参数符合longopts里的第几个元素的描述，即是longopts的下标值。
[cpp] view plain copy
#include <unistd.h>  
#include <stdlib.h>  
#include <stdio.h>  
#include <getopt.h>  
  
int  
main(int argc, char **argv)  
{  
   int opt;  
   int digit_optind = 0;  
   int option_index = 0;  
   char *optstring = "a:b:c:d";  
   static struct option long_options[] = {  
       {"reqarg", required_argument, NULL, 'r'},  
       {"noarg",  no_argument,       NULL, 'n'},  
       {"optarg", optional_argument, NULL, 'o'},  
       {0, 0, 0, 0}  
   };  
  
   while ( (opt = getopt_long(argc, argv, optstring, long_options, &option_index)) != -1)  
   {  
        printf("opt = %c\n", opt);  
        printf("optarg = %s\n", optarg);  
        printf("optind = %d\n", optind);  
        printf("argv[optind - 1] = %s\n",  argv[optind - 1]);  
        printf("option_index = %d\n", option_index);  
   }  
  
   return 0;  
}  
编译运行以上程序并运行，可以得到以下结果：
[plain] view plain copy
cashey@ubuntu:~/Desktop/getopt$ ./test_getopt_long -a 100 --reqarg 100 --nonarg  
opt = a  
optarg = 100  
optind = 3  
argv[optind - 1] = 100  
option_index = 0  
opt = r  
optarg = 100  
optind = 5  
argv[optind - 1] = 100  
option_index = 0  
./test_getopt_long: unrecognized option '--nonarg'  
opt = ?  
optarg = (null)  
optind = 6  
argv[optind - 1] = --nonarg  
option_index = 0  

当所给的参数存在问题时，opt（即函数返回值是'?'），如：
[plain] view plain copy
cashey@ubuntu:~/Desktop/getopt$ ./test_getopt_long -a  
./test_getopt_long: option requires an argument -- 'a'  
opt = ?  
optarg = (null)  
optind = 2  
argv[optind - 1] = -a  
option_index = 0  
cashey@ubuntu:~/Desktop/getopt$ ./test_getopt_long --reqarg  
./test_getopt_long: option '--reqarg' requires an argument  
opt = ?  
optarg = (null)  
optind = 2  
argv[optind - 1] = --reqarg  

最后说说getopt_long_only函数，它与getopt_long函数使用相同的参数表，在功能上基本一致，只是getopt_long只将--name当作长参数，但getopt_long_only会将--name和-name两种选项都当作长参数来匹配。在getopt_long在遇到-name时，会拆解成-n -a -m -e到optstring中进行匹配，而getopt_long_only只在-name不能在longopts中匹配时才将其拆解成-n -a -m -e这样的参数到optstring中进行匹配。
https://www.ibm.com/developerworks/cn/aix/library/au-unix-getopt.html
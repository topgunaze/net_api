	以前使用过mysql提供的C接口访问mysql数据库，没有出现过问题。就“别出心裁”想写出更漂亮的代码，如下：
static MYSQL 		*p_conn=NULL;  
static MYSQL_RES *p_result=NULL;  
  
int main (int argc, char *argv[])  
{  
    mysql_init(p_conn);  
      
    if( NULL==mysql_real_connect(p_conn, "localhost", "root", "*****", "*****", 0, NULL, 0) )  
    {  
        printf("error %u: %s\n", mysql_errno(p_conn), mysql_error(p_conn));  
    }  
      
    if( mysql_query(p_conn, "select * from online_dev") )   
    {  
        printf("error %u: %s\n", mysql_errno(p_conn), mysql_error(p_conn));  
    }  
          
    while( NULL!=(row=mysql_fetch_row(p_result)) )  
    {         
        /******** 
        ********/         
    }  
      
    if( NULL!=p_result )  
    {  
        mysql_free_result(p_result);  
        p_result=NULL;  
    }  
    if( NULL!=p_conn )  
    {  
        mysql_close(p_conn);  
        p_conn=NULL;  
    }  
      
    return 0;     
}  
实际运行的时候会收到SIGSEGV信号，提示段错误。分析这段代码：
1、定义了一个代表mysql连接的指针，初始化为NULL；妄想通过mysql_init(p_conn)来申请一个MYSQL的内存空间，并让p_conn指向这个地址；根据p_conn是否为NULL判断该数据库连接是否断开，不为NULL就断开连接，并赋给p_conn NULL值。

2、连接数据库和执行sql语句都没有问题。

3、妄想通过mysql_fetch_row(p_result)不仅从服务器取得一行数据，而且分配一个存储结果集的内存空间，p_result也会从NULL变成非NULL；

再看看正确的代码：

[cpp] view plain copy
static MYSQL conn;  
static MYSQL_RES *p_result;  
  
int main (int argc, char *argv[])  
{  
    mysql_init(&conn);  
      
    if( NULL==mysql_real_connect(&conn, "localhost", "root", "*****", "*****", 0, NULL, 0) )  
    {  
        printf("error %u: %s\n", mysql_errno(&conn), mysql_error(&conn));  
    }  
      
    if( mysql_query(&conn, "select * from online_dev") )   
    {  
        printf("error %u: %s\n", mysql_errno(&conn), mysql_error(&conn));  
    }  
      
    p_result=mysql_use_result(&conn);  
    while( NULL!=(row=mysql_fetch_row(p_result)) )  
    {         
        /******** 
        ********/         
    }  
    mysql_free_result(p_result);  
      
    mysql_close(&conn);  
    return 0;     
}  
说明：
1、mysql_init（）不会在内存中申请一个MYSQL结构，所以直接在栈里面定义一个，后续用&conn。

3、关于MYSQL_RES *p_result结果集指针，需要使用mysql_use_result（）产生一个结果集（返回值是结果集指针），用完之后要用mysql_free_result（）释放掉这块内存。
下面是一段关于这个问题mysql官网给出的解释：

After invoking mysql_query() you must call mysql_use_result() for every statement that successfully produces a result set. You must also call mysql_free_result() after you are done with the result set.


下面是mysql官网对C语言的API的在线手册地址。

1、首先当然是连接数据库，函数原型如下：

MYSQL * STDCALL  mysql_real_connect(MYSQL *mysql, const char *host,
const char *user,
const char *passwd,
const char *db,
unsigned int port,
const char *unix_socket,
unsigned long clientflag);

	第一个参数 MYSQL是 C api中一个非常重要的变量，里面内存非常丰富，有port,dbname,charset等连接基本参数。
	它也包含了一个叫st_mysql_methods的结构体变量，该变量里面保存着很多函数指针，
这些函数指针将会在数据库连接成功以后的各种数据操作中被调用。
	mysql_real_connect 函数中各参数，基本都是顾名思意。
	
2、连接数据库成功之后就可以执行sql语句了使用mysql_query

int  STDCALL  mysql_query(MYSQL *mysql, const char *q);

第一个参数上面已经介绍过，第二个参数为要执行的sql语句。

这个函数总体就两步：

（1）发送sql语句，其实就一个socket发送sql 语句，加上mysql固定的协议头。抓了下包，如下：
0000  19 00 00 00 03 73 65 6c 65 63 74 20 61 70 70 5f  .....select app_
0010  6e 61 6d 65 20 66 72 6f 6d 20 61 70 70           name from app
	红色部分是协议，前面两位其实就是包的长度。具体协议没研究过。

（2）然后就是接受结果，这里将会调用MYSQL变量中的 st_mysql_methods 中的 read_query_result 函数指针
3、获取结果
	sql执行完以后，如果是查询语句，当然还要读取数据，如果update，insert等语句，那么就看下操作成功与否即可。
如何获取查询结果： 如果 mysql_query 返回成功，那么就通过 mysql_store_result 这个函数来读取结果。原型如下：

MYSQL_RES  * STDCALL  mysql_store_result(MYSQL *mysql);

	该函数会调用MYSQL变量中的 st_mysql_methods 中的 read_rows函数指针来获取查询的结果。
	同时该函数会返回MYSQL_RES 这样一个变量，该变量主要用于保存查询的结果。同时该函数malloc了一片内存空间来存储查询过来的数据，
	所以一定要记的 free(result),不然是肯定会造成内存泄漏的。
	执行完 mysql_store_result 以后，其实数据都已经在MYSQL_RES 变量中了，
	下面的api基本就是读取 MYSQL_RES 中的数据。例如 mysql_fetch_row 这个函数，就是读去查询结果的一行。函数原型如下

MYSQL_ROW    STDCALL  mysql_fetch_row(MYSQL_RES *result);

	它会返回一个 MYSQL_ROW 变量，MYSQL_ROW 其实就是char **.就当成一个二维数组来用。
还有很多api，大部分信息都在MYSQL_RES MYSQL这两个结构体中。具体可以参考mysql官方网站： http://dev.mysql.com/doc/refman/5.1/en/c.html

下面来个例子：


上面这个例子就是从一个表中查数据，然后输出。 	
如果要insert或者update，只需要修改具体的sql既可。
具体的操作都是通过mysql_query这个函数来搞定。 
	现在来讲编译的方法吧，这里需要.h以及.so库。可以在 http://dev.mysql.com/downloads/connector/c/6.0.html 下载Connector/C。简单的方法就是： 把里面include的东西拷贝到/usr/include/mysql/下面去，这样编译的时候就不需要加-I了，然后把lib下面的东西拷贝的/usr/lib/下去。
	gcc具体的编译方法：gcc ***.c -o *** -lmysqlclient
	
	c语言操作Mysql数据库，主要就是为了实现对数据库的增、删、改、查等操作，操作之前，得先连接数据库啊，而连接数据库主要有两种方法。一、使用mysql本身提供的API,在mysql的安装目录中可可以看到大量的头文件、lib文件、dll文件，这说明mysql原生就支持了c语言，操作起来相当简单。二、使用win32 api(这里只探讨windows平台),主要是ODBC。

　　ODBC API 接口是(Open Database Connectivity)开放式数据库接口，它建立了一组规范，并提供了一组对数据库访问的标准API，这些API利用SQL来完成其大部分任务。ODBC本身也提供了对SQL语言的支持，用户可以直接将SQL语句送给ODBC。这个基于ODBC的应用程序对数据库的操作不依赖任何DBMS，不直接与DBMS打交道，所有的数据库操作由对应的DBMS的ODBC驱动程序完成。也就是说，不论是FoxPro、Access还是Oracle数据库，均可用ODBC API进行访问。由此可见，ODBC的最大优点是能以统一的方式处理所有的数据库。

　　这里先从第一种方法开始，先认识基本的几个api函数。

　　1　　MYSQL *mysql_init(MYSQL *mysql)　　

　　　　功能: 分配或初始化MYSQL对象。

　　　　参数:mysql　　

　　　　待初始化的MYSQ对象，将对象地址传入，NULL指针，该函数将分配、初始化、并返回新对象。否则，将初始化对象，并返回对象的地址。

　　　　用法实例:

　　　　MYSQL 　mysql;

　　　　mysql_init(&mysql); // 或者 mysql = mysql_init(NULL);

　　2　　MYSQL *mysql_real_connect(MYSQL *mysql, const char *host, const char *user, const char *passwd, const char *db, unsigned int port, const char *unix_socket, unsigned long client_flag)

　　　　功能:尝试与运行在主机上的MySQL数据库引擎建立连接，这个函数参数很多啊。看名字就可以是什么意思了

　　　　参数：mysql 前面一个函数的返回的mysql实例句柄。host 要连接的数据库的主机，可以是ip地址或主机名。user 表示登录数据库的用户名

passwd 登录的密码。db 就是访问的数据库。port mysql的tcp/ip端口默认是3306.unix_socket 表示连接类型。client_flag 暂时为0即可。

　　3　　int mysql_query(MYSQL *mysql,const char *query)

　　　　　功能:根据query查询语句执行查询数据库

　　　　　参数: mysql mysql的实例。query 查询语句字符串

　　　　返回值: 成功返回0，失败返回非0

　　4　　MYSQL_RES *mysql_store_result(MYSQL *mysql)

　　　　功能:得到查询的结果集,对于成功检索了数据的每个查询（SELECT、SHOW、DESCRIBE、EXPLAIN、CHECK TABLE等），必须调用mysql_store_result()或mysql_use_result() 

　　　　参数：mysql前面的mysql实例

　　　　返回值：成功返回MYSQL_RES结构体，该结构体中保存查询的结果

　　5　　MYSQL_ROW mysql_fetch_row(MYSQL_RES *result)

　　　　功能:mysql_store_result得到的结果结构中提取一行，并把它放到一个行结构中。

　　　　返回值:下一行的一个MYSQL_ROW结构当数据用完或发生错误时返回null

 

 

下面是简单实例代码

#include <stdio.h> 
#include <stdlib.h> 
#include<Windows.h>
#include "C:\Program Files\MySQL\MySQL Server 5.7\include\mysql.h" //包含MySQL所需要的头文件 
#pragma comment(lib, "libmysql.lib")

int main(void) 
{ 
　　MYSQL mysql, *sock; //声明MySQL的句柄 
　　const char * host = "127.0.0.1"; //因为是作为本机测试，所以填写的是本地IP 
　　const char * user = "root"; //这里改为你的用户名，即连接MySQL的用户名 
　　const char * passwd = "root"; //这里改为你的用户密码 
　　const char * db = "test"; //这里改为你要连接的数据库的名字,一个数据可能有几张表
　　unsigned int port = 3306; //这是MySQL的服务器的端口，如果你没有修改过的话就是3306。 
　　const char * unix_socket = NULL; //unix_socket这是unix下的，我在Windows下，所以就把它设置为NULL 
　　unsigned long client_flag = 0; //这个参数一般为0 

　　const char * i_query = "select * from person"; //查询语句，从那个表中查询,这里后面没有;

　　MYSQL_RES * result; //保存结果集的
　　MYSQL_ROW row; //代表的是结果集中的一行

　　//my_ulonglong row;

　　mysql_init(&mysql); //连接之前必须使用这个函数来初始化 
　　if ( (sock = mysql_real_connect(&mysql, host, user, passwd, db, port, unix_socket, client_flag) ) == NULL ) //连接MySQL 
　　{ 
　　　　printf("fail to connect mysql \n"); 
　　　　fprintf(stderr, " %s\n", mysql_error(&mysql)); 
　　　　exit(1); 
　　} 
　　else 
　　{ 
　　　　fprintf(stderr, "connect ok!!\n"); 
　　} 

　　if ( mysql_query(&mysql, i_query) != 0 ) //如果连接成功，则开始查询 .成功返回0
　　{ 
　　　　fprintf(stderr, "fail to query!\n"); 
　　　　exit(1); 
　　} 
　　else 
　　{ 
　　　　if ( (result = mysql_store_result(&mysql)) == NULL ) //保存查询的结果 
　　　　{ 
　　　　　　fprintf(stderr, "fail to store result!\n"); 
　　　　　　exit(1); 
　　　　} 
　　　　else 
　　　　{ 
　　　　　　　　while ( (row = mysql_fetch_row(result)) != NULL ) //读取结果集中的数据，返回的是下一行。因为保存结果集时，当前的游标在第一行【之前】 
　　　　　　　　{ 
　　　　　　　　　　printf("name is %s\t", row[0]); //打印当前行的第一列的数据 
　　　　　　　　　　printf("age is %s\t\n", row[1]); //打印当前行的第二列的数据

　　　　　　　　　　//row = mysql_num_row(result);
　　　　　　　　　　//printf("%lu\n", mysql_num_row(result));
　　　　　　　　} 
　　　　} 

　　}

　　mysql_free_result(result); //释放结果集 
　　mysql_close(sock); //关闭连接 
　　system("pause"); 
　　exit(EXIT_SUCCESS); 

}